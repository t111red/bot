import time
import sqlite3
import logging
import datetime
import signal
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='[SYNC] %(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

class InternalSyncService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        self.conn = None
        self.is_running = True
        self.check_interval = 5  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        logging.info("üîÑ –°–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._handle_signal)
        signal.signal(signal.SIGTERM, self._handle_signal)
    
    def _handle_signal(self, sig, frame):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        logging.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        self.is_running = False
        if self.conn:
            try:
                self.conn.close()
            except:
                pass
        sys.exit(0)
    
    def db_connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞."""
        try:
            if self.conn:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    self.conn.execute("SELECT 1")
                    return self.conn
                except:
                    # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                    try:
                        self.conn.close()
                    except:
                        pass
                    self.conn = None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
            current_dir = os.path.dirname(os.path.abspath(__file__))
            db_path = os.path.join(current_dir, "bot.db")
            
            self.conn = sqlite3.connect(db_path)
            self.conn.row_factory = sqlite3.Row
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ datetime
            sqlite3.register_adapter(datetime.datetime, lambda dt: dt.isoformat())
            sqlite3.register_converter("datetime", lambda s: datetime.datetime.fromisoformat(s.decode()))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            self._ensure_columns_exist()
            
            return self.conn
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
            
    def _ensure_columns_exist(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        try:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if self.conn is None:
                self.db_connect()
                
            if self.conn is None:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ created_at –≤ —Ç–∞–±–ª–∏—Ü–µ leads
            try:
                self.conn.execute("SELECT created_at FROM leads LIMIT 1")
            except sqlite3.OperationalError as e:
                if "no such column" in str(e).lower():
                    logging.warning("–ö–æ–ª–æ–Ω–∫–∞ created_at –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ leads. –î–æ–±–∞–≤–ª—è–µ–º...")
                    self.conn.execute("ALTER TABLE leads ADD COLUMN created_at TEXT")
                    self.conn.execute("UPDATE leads SET created_at = timestamp")
                    self.conn.commit()
                    logging.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ created_at —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É leads")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ last_ping –≤ —Ç–∞–±–ª–∏—Ü–µ leads
            try:
                self.conn.execute("SELECT last_ping FROM leads LIMIT 1")
            except sqlite3.OperationalError as e:
                if "no such column" in str(e).lower():
                    logging.warning("–ö–æ–ª–æ–Ω–∫–∞ last_ping –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ leads. –î–æ–±–∞–≤–ª—è–µ–º...")
                    self.conn.execute("ALTER TABLE leads ADD COLUMN last_ping TEXT")
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                    now = datetime.datetime.now().isoformat()
                    self.conn.execute("UPDATE leads SET last_ping = ?", (now,))
                    self.conn.commit()
                    logging.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ last_ping —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É leads")
                    
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
    
    def check_unnotified_statuses(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."""
        try:
            conn = self.db_connect()
            if not conn:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            cursor = conn.execute(
                """
                SELECT * FROM failed_notifications
                WHERE attempts < 10
                ORDER BY id
                """
            )
            notifications = cursor.fetchall()
            
            if notifications:
                logging.info(f"‚úâÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(notifications)} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            for notif in notifications:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
                now = datetime.datetime.now()
                conn.execute(
                    """
                    UPDATE failed_notifications
                    SET attempts = attempts + 1, last_attempt = ?
                    WHERE id = ?
                    """,
                    (now, notif['id'])
                )
                conn.commit()
            
            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 10 —Ä–∞–∑
            conn.execute(
                """
                DELETE FROM failed_notifications
                WHERE attempts >= 10
                """
            )
            conn.commit()
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def process_expired_leads(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ª–∏–¥—ã. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–º."""
        try:
            conn = self.db_connect()
            if not conn:
                return
            
            now = datetime.datetime.now()
            expiry_time = now - datetime.timedelta(minutes=15)  # –õ–∏–¥—ã —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç
            
            # –ü–æ–º–µ—á–∞–µ–º –ª–∏–¥—ã –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –ª–∏–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_rows = conn.execute(
                """
                UPDATE leads
                SET expired = 1
                WHERE timestamp < ? AND is_completed = 0 AND (expired = 0 OR expired IS NULL)
                AND id NOT IN (
                    SELECT MAX(id) FROM leads 
                    WHERE is_completed = 0 AND (expired = 0 OR expired IS NULL)
                    GROUP BY user_id
                )
                """,
                (expiry_time,)
            ).rowcount
            
            conn.commit()
            
            if updated_rows > 0:
                logging.info(f"‚úÖ –ü–æ–º–µ—á–µ–Ω–æ {updated_rows} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–∏–¥–æ–≤ (—Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç)")
            
        except Exception as e:
            import traceback
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–∏–¥–æ–≤: {e}")
            logging.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    
    def cleanup_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã."""
        try:
            conn = self.db_connect()
            if not conn:
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã failed_notifications
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                conn.execute("SELECT 1 FROM failed_notifications LIMIT 1")
                
                # –£–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
                thirty_days_ago = datetime.datetime.now() - datetime.timedelta(days=30)
                deleted_rows = conn.execute(
                    """
                    DELETE FROM failed_notifications
                    WHERE timestamp < ?
                    """,
                    (thirty_days_ago,)
                ).rowcount
                
                conn.commit()
                
                if deleted_rows > 0:
                    logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_rows} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
            except sqlite3.OperationalError as e:
                if "no such table" in str(e).lower():
                    logging.info("–¢–∞–±–ª–∏—Ü–∞ failed_notifications –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É")
                else:
                    raise
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ."""
        logging.info("‚ñ∂Ô∏è –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
        last_cleanup = datetime.datetime.now()
        last_check_expired = datetime.datetime.now()
        
        while self.is_running:
            try:
                now = datetime.datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª
                self.check_unnotified_statuses()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ª–∏–¥—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                if (now - last_check_expired).total_seconds() >= 10:
                    self.process_expired_leads()
                    last_check_expired = now
                    logging.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ª–∏–¥–æ–≤ (—Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç)")
                
                # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∂–µ (—Ä–∞–∑ –≤ —á–∞—Å)
                if (now - last_cleanup).total_seconds() >= 3600:  # 1 —á–∞—Å
                    self.cleanup_old_data()
                    last_cleanup = now
                
                # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                time.sleep(self.check_interval)
                
            except Exception as e:
                logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ

if __name__ == "__main__":
    service = InternalSyncService()
    service.run()