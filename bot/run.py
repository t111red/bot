#!/usr/bin/env python3
import os
import time
import subprocess
import threading
import signal
import logging
import sys
import psutil
import socket
import importlib
import traceback

# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
script_path = os.path.abspath(__file__)
script_dir = os.path.dirname(script_path)
os.chdir(script_dir)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_process = None
sync_process = None
web_process = None
miniapp_process = None
running = True

# –§–∞–π–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
BOT_PID_FILE = "bot.pid"
SYNC_PID_FILE = "sync.pid"
WEB_PID_FILE = "web.pid"

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
    global running
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    running = False
    stop_processes()
    sys.exit(0)

def is_port_in_use(port):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

def is_process_running(pid_file):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(pid_file):
        return False
        
    try:
        with open(pid_file, 'r') as f:
            pid = int(f.read().strip())
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID
        if psutil.pid_exists(pid):
            proc = psutil.Process(pid)
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–æ–º–±–∏, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–º
            if proc.status() == psutil.STATUS_ZOMBIE:
                return False
            return True
        return False
    except (ValueError, ProcessLookupError, psutil.NoSuchProcess):
        return False

def save_pid(pid, pid_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ñ–∞–π–ª."""
    with open(pid_file, 'w') as f:
        f.write(str(pid))

def remove_pid_file(pid_file):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å PID."""
    if os.path.exists(pid_file):
        os.remove(pid_file)

def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Å–æ–ª—å."""
    import subprocess  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    global bot_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    if is_process_running(BOT_PID_FILE):
        logging.info("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
        return
    
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))
    botf_path = os.path.join(current_dir, "botf.py")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
    bot_process = subprocess.Popen(
        ["python", botf_path],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        cwd=current_dir  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª
    save_pid(bot_process.pid, BOT_PID_FILE)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
    start_output_reader(bot_process.stdout, "–ë–û–¢")

def start_web_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    global web_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if is_process_running(WEB_PID_FILE):
        logging.info("‚ö†Ô∏è –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 5000
    if is_port_in_use(5000):
        logging.warning("‚ö†Ô∏è –ü–æ—Ä—Ç 5000 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å...")
        # –ù–∞ Replit –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º connections, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º lsof –∏–ª–∏ netstat –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            import subprocess
            try:
                # –ü—Ä–æ–±—É–µ–º lsof (Linux/Mac)
                output = subprocess.check_output(["lsof", "-i", ":5000", "-t"], text=True)
                pids = [int(pid.strip()) for pid in output.split('\n') if pid.strip()]
                
                for pid in pids:
                    logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {pid}, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç 5000")
                    try:
                        proc = psutil.Process(pid)
                        proc.terminate()
                        proc.wait(timeout=3)
                    except (ProcessLookupError, psutil.NoSuchProcess):
                        pass
            except (subprocess.SubprocessError, FileNotFoundError):
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lsof –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä–æ—Å—Ç–æ —É–±–∏–≤–∞–µ–º –≤—Å–µ gunicorn-–ø—Ä–æ—Ü–µ—Å—Å—ã
                for proc in psutil.process_iter(['pid', 'name']):
                    try:
                        if 'gunicorn' in proc.info['name'].lower():
                            logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º gunicorn –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                            proc.terminate()
                            proc.wait(timeout=3)
                    except (psutil.AccessDenied, psutil.NoSuchProcess):
                        continue
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 5000: {e}")
    
    logging.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))
    main_path = os.path.join(current_dir, "main.py")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ main.py
    import subprocess as sp
    import platform
    main_file = os.path.join(current_dir, "main.py")
    
    # –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ Flask –≤–º–µ—Å—Ç–æ gunicorn
    if platform.system() == 'Windows':
        logging.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –û–° Windows, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Flask –±–µ–∑ gunicorn")
        web_process = sp.Popen(
            [sys.executable, "-c", 
             "import sys; sys.path.insert(0, '.'); from main import app; app.run(host='0.0.0.0', port=5000, debug=False)"],
            stdout=sp.PIPE,
            stderr=sp.STDOUT,
            text=True,
            bufsize=1,
            cwd=current_dir
        )
    else:
        # –ù–∞ Unix-—Å–∏—Å—Ç–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º gunicorn
        web_process = sp.Popen(
            ["gunicorn", "--bind", "0.0.0.0:5000", "--reuse-port", "--reload", 
             "--pythonpath", current_dir, "main:app"],
            stdout=sp.PIPE,
            stderr=sp.STDOUT,
            text=True,
            bufsize=1,
            cwd=current_dir  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    save_pid(web_process.pid, WEB_PID_FILE)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
    start_output_reader(web_process.stdout, "–í–ï–ë")

def start_sync_service():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    import subprocess  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    global sync_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if is_process_running(SYNC_PID_FILE):
        logging.info("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
        return
    
    logging.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync_process = subprocess.Popen(
        ["python", "-c", "from sync_service import InternalSyncService; InternalSyncService().run()"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        cwd=current_dir  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
    save_pid(sync_process.pid, SYNC_PID_FILE)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
    start_output_reader(sync_process.stdout, "–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø")

def start_output_reader(pipe, prefix):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    def reader_thread():
        for line in iter(pipe.readline, ''):
            if line:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                line = line.rstrip()
                if line:
                    logging.info(f"[{prefix}] {line}")
    
    thread = threading.Thread(target=reader_thread, daemon=True)
    thread.start()
    return thread

def stop_processes():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
    global bot_process, sync_process, web_process, miniapp_process
    
    logging.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    if bot_process and bot_process.poll() is None:
        try:
            bot_process.terminate()
            bot_process.wait(timeout=5)
        except:
            bot_process.kill()
        remove_pid_file(BOT_PID_FILE)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if sync_process and sync_process.poll() is None:
        try:
            sync_process.terminate()
            sync_process.wait(timeout=5)
        except:
            sync_process.kill()
        remove_pid_file(SYNC_PID_FILE)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if web_process and web_process.poll() is None:
        try:
            web_process.terminate()
            web_process.wait(timeout=5)
        except:
            web_process.kill()
        remove_pid_file(WEB_PID_FILE)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if miniapp_process and miniapp_process.poll() is None:
        try:
            miniapp_process.terminate()
            miniapp_process.wait(timeout=5)
        except:
            miniapp_process.kill()
        remove_pid_file("miniapp.pid")
    
    logging.info("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ñ–∞–π–ª–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞
# –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    global bot_process
    
    logging.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
    if bot_process and bot_process.poll() is None:
        try:
            bot_process.terminate()
            bot_process.wait(timeout=5)
        except:
            bot_process.kill()
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å PID
    remove_pid_file(BOT_PID_FILE)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å–Ω–æ–≤–∞
    start_bot()

def check_duplicate_processes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏—Ö."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ 'python' –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—É 'botf.py'
    bot_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] == 'python' or proc.info['name'] == 'python3':
                cmdline = proc.info['cmdline']
                if cmdline and any('botf.py' in arg for arg in cmdline):
                    bot_processes.append(proc.info['pid'])
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    if len(bot_processes) > 1:
        logging.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(bot_processes)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–µ—Ä—à–∞–µ–º
        for pid in bot_processes[1:]:
            try:
                proc = psutil.Process(pid)
                logging.info(f"üõë –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–∏—à–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ (PID: {pid})")
                proc.terminate()
                try:
                    proc.wait(timeout=3)
                except psutil.TimeoutExpired:
                    proc.kill()
            except (ProcessLookupError, psutil.NoSuchProcess):
                continue
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] == 'python' or proc.info['name'] == 'python3':
                cmdline = proc.info['cmdline']
                if cmdline and any('InternalSyncService' in arg for arg in cmdline):
                    sync_processes.append(proc.info['pid'])
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    if len(sync_processes) > 1:
        logging.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(sync_processes)} –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≤–µ—Ä—à–∞–µ–º
        for pid in sync_processes[1:]:
            try:
                proc = psutil.Process(pid)
                logging.info(f"üõë –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–∏—à–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (PID: {pid})")
                proc.terminate()
                try:
                    proc.wait(timeout=3)
                except psutil.TimeoutExpired:
                    proc.kill()
            except (ProcessLookupError, psutil.NoSuchProcess):
                continue

def check_processes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    global bot_process, sync_process, web_process, miniapp_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if bot_process and bot_process.poll() is not None:
        logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        remove_pid_file(BOT_PID_FILE)
        start_bot()
    elif not bot_process and not is_process_running(BOT_PID_FILE):
        start_bot()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if sync_process and sync_process.poll() is not None:
        logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        remove_pid_file(SYNC_PID_FILE)
        start_sync_service()
    elif not sync_process and not is_process_running(SYNC_PID_FILE):
        start_sync_service()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if web_process and web_process.poll() is not None:
        logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        remove_pid_file(WEB_PID_FILE)
        start_web_app()
    elif not web_process and not is_process_running(WEB_PID_FILE):
        start_web_app()
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if miniapp_process and miniapp_process.poll() is not None:
        logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        remove_pid_file("miniapp.pid")
        start_miniapp()
    elif not miniapp_process and not is_process_running("miniapp.pid"):
        start_miniapp()
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
    check_duplicate_processes()

def cleanup_orphaned_processes():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤-—Å–∏—Ä–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤."""
    import os  # –õ–æ–∫–∞–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º os –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    import psutil  # –õ–æ–∫–∞–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º psutil
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤-—Å–∏—Ä–æ—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
    if os.path.exists(BOT_PID_FILE):
        try:
            with open(BOT_PID_FILE, 'r') as f:
                pid = int(f.read().strip())
                if psutil.pid_exists(pid):
                    proc = psutil.Process(pid)
                    logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ —Å PID {pid} –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
                    proc.terminate()
                    try:
                        proc.wait(timeout=3)
                    except psutil.TimeoutExpired:
                        proc.kill()
        except (ValueError, ProcessLookupError, psutil.NoSuchProcess):
            pass
        try:
            os.remove(BOT_PID_FILE)
        except FileNotFoundError:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if os.path.exists(SYNC_PID_FILE):
        try:
            with open(SYNC_PID_FILE, 'r') as f:
                pid = int(f.read().strip())
                if psutil.pid_exists(pid):
                    proc = psutil.Process(pid)
                    logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å PID {pid} –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
                    proc.terminate()
                    try:
                        proc.wait(timeout=3)
                    except psutil.TimeoutExpired:
                        proc.kill()
        except (ValueError, ProcessLookupError, psutil.NoSuchProcess):
            pass
        try:
            os.remove(SYNC_PID_FILE)
        except FileNotFoundError:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω
            pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if os.path.exists(WEB_PID_FILE):
        try:
            with open(WEB_PID_FILE, 'r') as f:
                pid = int(f.read().strip())
                if psutil.pid_exists(pid):
                    proc = psutil.Process(pid)
                    logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å PID {pid} –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
                    proc.terminate()
                    try:
                        proc.wait(timeout=3)
                    except psutil.TimeoutExpired:
                        proc.kill()
        except (ValueError, ProcessLookupError, psutil.NoSuchProcess):
            pass
        try:
            os.remove(WEB_PID_FILE)
        except FileNotFoundError:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω
            pass
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç 5000, –µ—Å–ª–∏ –æ–Ω –∑–∞–Ω—è—Ç
    if is_port_in_use(5000):
        logging.info("–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç 5000...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ connections –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
        try:
            import subprocess
            output = subprocess.check_output(['lsof', '-i', ':5000', '-t'], stderr=subprocess.DEVNULL, text=True)
            if output:
                for pid in output.strip().split('\n'):
                    if pid:
                        pid = int(pid)
                        logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {pid}, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç 5000")
                        try:
                            proc = psutil.Process(pid)
                            proc.terminate()
                            proc.wait(timeout=3)
                        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.TimeoutExpired):
                            try:
                                import os
                                os.kill(pid, 9)  # SIGKILL
                            except:
                                pass
        except:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥, –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º gunicorn –ø—Ä–æ—Ü–µ—Å—Å—ã
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if proc.info['name'] and 'gunicorn' in proc.info['name']:
                        logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º gunicorn –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                        proc.terminate()
                        try:
                            proc.wait(timeout=3)
                        except psutil.TimeoutExpired:
                            proc.kill()
                except (psutil.AccessDenied, psutil.NoSuchProcess):
                    continue

def start_miniapp():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä—ã–±—ã."""
    import subprocess  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    import os  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    global miniapp_process
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    miniapp_pid_file = os.path.join(current_dir, "miniapp.pid")
    if is_process_running(miniapp_pid_file):
        logging.info("‚ö†Ô∏è –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 8080
    if is_port_in_use(8080):
        logging.warning("‚ö†Ô∏è –ü–æ—Ä—Ç 8080 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å...")
        # –ù–∞ Replit –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º connections, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º lsof –∏–ª–∏ netstat –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            import subprocess
            try:
                # –ü—Ä–æ–±—É–µ–º lsof (Linux/Mac)
                output = subprocess.check_output(["lsof", "-i", ":8080", "-t"], text=True)
                pids = [int(pid.strip()) for pid in output.split('\n') if pid.strip()]
                
                for pid in pids:
                    logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {pid}, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç 8080")
                    try:
                        proc = psutil.Process(pid)
                        proc.terminate()
                        proc.wait(timeout=3)
                    except (ProcessLookupError, psutil.NoSuchProcess):
                        pass
            except (subprocess.SubprocessError, FileNotFoundError):
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lsof –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ flask-–ø—Ä–æ—Ü–µ—Å—Å—ã
                for proc in psutil.process_iter(['pid', 'name']):
                    try:
                        if 'flask' in proc.info['name'].lower():
                            logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º flask –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}")
                            proc.terminate()
                            proc.wait(timeout=3)
                    except (psutil.AccessDenied, psutil.NoSuchProcess):
                        continue
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 8080: {e}")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ Mini App –ø—Ä—è–º–æ –∑–¥–µ—Å—å
    from flask import Flask, render_template, send_from_directory, request, jsonify
    
    # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Mini App
    miniapp = Flask(__name__, 
                  static_folder='static/webapp',
                  template_folder='static/webapp')
    
    @miniapp.route('/')
    def index():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Mini App"""
        return render_template('index.html')
    
    @miniapp.route('/<path:path>')
    def serve_static(path):
        """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        return send_from_directory('static/webapp', path)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º json –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å JSON-–¥–∞–Ω–Ω—ã–º–∏
    import json
    
    @miniapp.route('/api/process-order', methods=['POST', 'OPTIONS'])
    def process_order():
        """API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Mini App"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS
        if request.method == 'OPTIONS':
            response = jsonify({})
            response.headers.add('Access-Control-Allow-Origin', '*')
            response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Telegram-Data,X-Requested-With')
            response.headers.add('Access-Control-Allow-Methods', 'POST')
            return response
            
        if not request.is_json:
            logging.error(f"[MiniApp] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞, Content-Type: {request.content_type}")
            return jsonify({"error": "–û–∂–∏–¥–∞–µ—Ç—Å—è JSON —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", "success": False}), 400
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        order_data = request.get_json()
        if not order_data:
            logging.error("[MiniApp] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞", "success": False}), 400
            
        logging.info(f"[MiniApp] –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {json.dumps(order_data, ensure_ascii=False)}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'phone', 'items']
        missing_fields = []
        for field in required_fields:
            if field not in order_data or not order_data.get(field):
                missing_fields.append(field)
        
        if missing_fields:
            logging.error(f"[MiniApp] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
            return jsonify({
                "error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}", 
                "success": False,
                "missingFields": missing_fields
            }), 400
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        items = order_data.get('items', [])
        if isinstance(items, list):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            normalized_items = []
            for item in items:
                if isinstance(item, dict):
                    normalized_item = {}
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
                    size = item.get('size')
                    if size:
                        normalized_item['size'] = size
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä
                    name = item.get('name')
                    if name:
                        normalized_item['name'] = name
                    elif size:
                        normalized_item['name'] = size
                    else:
                        normalized_item['name'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    quantity = item.get('quantity', 1)
                    normalized_item['quantity'] = quantity
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É
                    price = item.get('price')
                    if price:
                        normalized_item['price'] = price
                    else:
                        if size == '–ú–∞–ª–µ–Ω—å–∫–∞—è':
                            normalized_item['price'] = 500
                        elif size == '–°—Ä–µ–¥–Ω—è—è':
                            normalized_item['price'] = 900
                        elif size == '–ö—Ä—É–ø–Ω–∞—è':
                            normalized_item['price'] = 1500
                        else:
                            normalized_item['price'] = 800
                    
                    normalized_items.append(normalized_item)
            
            # –ó–∞–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º
            order_data['items'] = normalized_items
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        import time
        from datetime import datetime
        order_id = int(time.time() * 1000) % 10000000  # –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π ID –∑–∞–∫–∞–∑–∞
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å ID –∑–∞–∫–∞–∑–∞
        return jsonify({
            'success': True,
            'orderId': order_id,
            'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'
        })
    
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Mini App –Ω–∞ –ø–æ—Ä—Ç—É 8080...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ python
    miniapp_path = os.path.join(current_dir, "miniapp.py")
    # –ì–æ—Ç–æ–≤–∏–º —Å—Ç—Ä–æ–∫—É —Å –ø—É—Ç–µ–º –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    app_dir = current_dir.replace("\\", "\\\\")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –¥–ª—è Windows
    miniapp_code = f"""
import os
import sys
from flask import Flask, render_template, send_from_directory, request, jsonify

current_dir = '{app_dir}'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
app = Flask(__name__, 
           static_folder=os.path.join(current_dir, "static", "webapp"), 
           template_folder=os.path.join(current_dir, "static", "webapp"))

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/static/<path:path>')
def serve_static(path):
    return send_from_directory(os.path.join(current_dir, "static", "webapp"), path)

@app.route('/api/order', methods=['POST'])
def process_order():
    \"\"\"–û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–∫–∞–∑–æ–≤.\"\"\"
    try:
        order_data = request.get_json(silent=True) or {{}}
        print("–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API:", str(order_data))
        return jsonify({{"success": True, "message": "–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω"}})
    except Exception:
        import traceback
        error_text = traceback.format_exc()
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:", error_text)
        return jsonify({{"success": False, "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞"}}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=False)
else:
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ gunicorn –∏–ª–∏ –¥—Ä—É–≥–æ–π WSGI-—Å–µ—Ä–≤–µ—Ä
    application = app

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows
app.run(host='0.0.0.0', port=8080, debug=False)
"""
    
    miniapp_process = subprocess.Popen(
        ["python", "-c", miniapp_code],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        cwd=current_dir
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    save_pid(miniapp_process.pid, miniapp_pid_file)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
    start_output_reader(miniapp_process.stdout, "MINIAPP")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    cleanup_orphaned_processes()
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    start_bot()
    start_sync_service()
    start_web_app()
    start_miniapp()  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ Telegram Mini App
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    logging.info("–ó–∞–ø—É—Å–∫ –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö")
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while running:
            check_processes()
            time.sleep(5)
    except KeyboardInterrupt:
        print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        stop_processes()

if __name__ == "__main__":
    print(f"üêü –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã '–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞' v1.0")
    main()