#!/usr/bin/env python3
import os
import time
import subprocess
import threading
import signal
import logging
import sys
import psutil
import socket
import platform
import json
import traceback

# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
script_path = os.path.abspath(__file__)
script_dir = os.path.dirname(script_path)
os.chdir(script_dir)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_process = None
sync_process = None
web_process = None
miniapp_process = None
cloudflared_web_process = None
cloudflared_miniapp_process = None
running = True

# –§–∞–π–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
BOT_PID_FILE = "bot.pid"
SYNC_PID_FILE = "sync.pid"
WEB_PID_FILE = "web.pid"
MINIAPP_PID_FILE = "miniapp.pid"

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
    global running
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    running = False
    stop_processes()
    sys.exit(0)

def is_port_in_use(port):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

def is_process_running(pid_file):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(pid_file):
        return False
        
    try:
        with open(pid_file, 'r') as f:
            pid = int(f.read().strip())
            
        if psutil.pid_exists(pid):
            proc = psutil.Process(pid)
            if proc.status() == psutil.STATUS_ZOMBIE:
                return False
            return True
        return False
    except (ValueError, ProcessLookupError, psutil.NoSuchProcess):
        return False

def save_pid(pid, pid_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ñ–∞–π–ª."""
    with open(pid_file, 'w') as f:
        f.write(str(pid))

def remove_pid_file(pid_file):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å PID."""
    if os.path.exists(pid_file):
        os.remove(pid_file)

def kill_process_on_port(port):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç."""
    try:
        if platform.system() == "Windows":
            # Windows
            result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True)
            lines = result.stdout.split('\n')
            for line in lines:
                if f':{port}' in line and 'LISTENING' in line:
                    parts = line.split()
                    if len(parts) >= 5:
                        pid = parts[-1]
                        try:
                            subprocess.run(['taskkill', '/F', '/PID', pid], check=True)
                            logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                        except subprocess.CalledProcessError:
                            pass
        else:
            # Unix-like systems
            try:
                result = subprocess.run(['lsof', '-ti', f':{port}'], capture_output=True, text=True)
                if result.stdout:
                    pids = result.stdout.strip().split('\n')
                    for pid in pids:
                        if pid:
                            try:
                                subprocess.run(['kill', '-9', pid], check=True)
                                logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å {pid} –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                            except subprocess.CalledProcessError:
                                pass
            except FileNotFoundError:
                # lsof –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                pass
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")

def start_cloudflared_tunnel(port, service_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç cloudflared —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ cloudflared
        result = subprocess.run(['cloudflared', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            logging.warning("cloudflared –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª–µ–π.")
            return None
            
        logging.info(f"üåê –ó–∞–ø—É—Å–∫–∞–µ–º cloudflared —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è {service_name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        
        process = subprocess.Popen(
            ['cloudflared', 'tunnel', '--url', f'http://localhost:{port}'],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL
        def read_cloudflared_output():
            for line in iter(process.stdout.readline, ''):
                if line:
                    line = line.strip()
                    if 'trycloudflare.com' in line or 'https://' in line:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        parts = line.split()
                        for part in parts:
                            if 'https://' in part and 'trycloudflare.com' in part:
                                logging.info(f"üîó {service_name} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {part}")
                                break
                    if line:
                        logging.info(f"[CLOUDFLARED-{service_name.upper()}] {line}")
        
        thread = threading.Thread(target=read_cloudflared_output, daemon=True)
        thread.start()
        
        return process
        
    except FileNotFoundError:
        logging.warning("cloudflared –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ cloudflared –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª–µ–π.")
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ cloudflared –¥–ª—è {service_name}: {e}")
        return None

def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    global bot_process
    
    if is_process_running(BOT_PID_FILE):
        logging.info("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
        return
    
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    botf_path = os.path.join(current_dir, "botf.py")
    
    bot_process = subprocess.Popen(
        [sys.executable, botf_path],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        cwd=current_dir
    )
    
    save_pid(bot_process.pid, BOT_PID_FILE)
    start_output_reader(bot_process.stdout, "–ë–û–¢")

def start_web_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ Flask."""
    global web_process, cloudflared_web_process
    
    if is_process_running(WEB_PID_FILE):
        logging.info("‚ö†Ô∏è –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
        return
    
    if is_port_in_use(5000):
        logging.warning("‚ö†Ô∏è –ü–æ—Ä—Ç 5000 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º...")
        kill_process_on_port(5000)
        time.sleep(2)
    
    logging.info("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ Flask...")
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
    web_process = subprocess.Popen(
        [sys.executable, "-c", 
         f"import sys; sys.path.insert(0, '{current_dir}'); "
         "from main import app; app.run(host='0.0.0.0', port=5000, debug=False)"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        cwd=current_dir
    )
    
    save_pid(web_process.pid, WEB_PID_FILE)
    start_output_reader(web_process.stdout, "–í–ï–ë")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º cloudflared —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    cloudflared_web_process = start_cloudflared_tunnel(5000, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

def start_miniapp():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä—ã–±—ã."""
    global miniapp_process, cloudflared_miniapp_process
    
    if is_process_running(MINIAPP_PID_FILE):
        logging.info("‚ö†Ô∏è –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
        return
    
    if is_port_in_use(8080):
        logging.warning("‚ö†Ô∏è –ü–æ—Ä—Ç 8080 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º...")
        kill_process_on_port(8080)
        time.sleep(2)
    
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Mini App –Ω–∞ –ø–æ—Ä—Ç—É 8080...")
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    miniapp_code = f"""
import os
import sys
from flask import Flask, render_template, send_from_directory, request, jsonify

current_dir = '{current_dir.replace(chr(92), chr(92)+chr(92))}'
app = Flask(__name__, 
           static_folder=os.path.join(current_dir, "static", "webapp"), 
           template_folder=os.path.join(current_dir, "static", "webapp"))

@app.route('/')
def index():
    return render_template('basic.html')

@app.route('/webapp/<path:path>')
def serve_webapp_static(path):
    return send_from_directory(os.path.join(current_dir, "static", "webapp"), path)

@app.route('/static/<path:path>')
def serve_static(path):
    return send_from_directory(os.path.join(current_dir, "static", "webapp"), path)

@app.route('/api/process_order', methods=['POST', 'OPTIONS'])
def process_order():
    if request.method == 'OPTIONS':
        response = jsonify({{}})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Telegram-Data,X-Requested-With')
        response.headers.add('Access-Control-Allow-Methods', 'POST')
        return response
        
    try:
        order_data = request.get_json(silent=True) or {{}}
        print("–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API:", str(order_data))
        
        import time
        order_id = int(time.time() * 1000) % 10000000
        
        return jsonify({{"success": True, "orderId": order_id, "message": "–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω"}})
    except Exception as e:
        import traceback
        error_text = traceback.format_exc()
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:", error_text)
        return jsonify({{"success": False, "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞"}}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=False)
"""
    
    miniapp_process = subprocess.Popen(
        [sys.executable, "-c", miniapp_code],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        cwd=current_dir
    )
    
    save_pid(miniapp_process.pid, MINIAPP_PID_FILE)
    start_output_reader(miniapp_process.stdout, "MINIAPP")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º cloudflared —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    cloudflared_miniapp_process = start_cloudflared_tunnel(8080, "Mini App")

def start_sync_service():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    global sync_process
    
    if is_process_running(SYNC_PID_FILE):
        logging.info("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫")
        return
    
    logging.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    sync_process = subprocess.Popen(
        [sys.executable, "-c", "from sync_service import InternalSyncService; InternalSyncService().run()"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        cwd=current_dir
    )
    
    save_pid(sync_process.pid, SYNC_PID_FILE)
    start_output_reader(sync_process.stdout, "–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø")

def start_output_reader(pipe, prefix):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    def reader_thread():
        for line in iter(pipe.readline, ''):
            if line:
                line = line.rstrip()
                if line:
                    logging.info(f"[{prefix}] {line}")
    
    thread = threading.Thread(target=reader_thread, daemon=True)
    thread.start()
    return thread

def stop_processes():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""
    global bot_process, sync_process, web_process, miniapp_process
    global cloudflared_web_process, cloudflared_miniapp_process
    
    logging.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    
    processes = [
        (bot_process, BOT_PID_FILE, "–±–æ—Ç–∞"),
        (sync_process, SYNC_PID_FILE, "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"),
        (web_process, WEB_PID_FILE, "–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        (miniapp_process, MINIAPP_PID_FILE, "–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        (cloudflared_web_process, None, "cloudflared –≤–µ–±"),
        (cloudflared_miniapp_process, None, "cloudflared miniapp")
    ]
    
    for process, pid_file, name in processes:
        if process and process.poll() is None:
            try:
                process.terminate()
                process.wait(timeout=5)
                logging.info(f"–ü—Ä–æ—Ü–µ—Å—Å {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                try:
                    process.kill()
                    logging.info(f"–ü—Ä–æ—Ü–µ—Å—Å {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                except:
                    pass
            if pid_file:
                remove_pid_file(pid_file)
    
    logging.info("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def check_processes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    global bot_process, sync_process, web_process, miniapp_process
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    if bot_process and bot_process.poll() is not None:
        logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        remove_pid_file(BOT_PID_FILE)
        start_bot()
    elif not bot_process and not is_process_running(BOT_PID_FILE):
        start_bot()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if sync_process and sync_process.poll() is not None:
        logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        remove_pid_file(SYNC_PID_FILE)
        start_sync_service()
    elif not sync_process and not is_process_running(SYNC_PID_FILE):
        start_sync_service()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if web_process and web_process.poll() is not None:
        logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        remove_pid_file(WEB_PID_FILE)
        start_web_app()
    elif not web_process and not is_process_running(WEB_PID_FILE):
        start_web_app()
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if miniapp_process and miniapp_process.poll() is not None:
        logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        remove_pid_file(MINIAPP_PID_FILE)
        start_miniapp()
    elif not miniapp_process and not is_process_running(MINIAPP_PID_FILE):
        start_miniapp()

def cleanup_orphaned_processes():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤-—Å–∏—Ä–æ—Ç."""
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤-—Å–∏—Ä–æ—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤...")
    
    pid_files = [BOT_PID_FILE, SYNC_PID_FILE, WEB_PID_FILE, MINIAPP_PID_FILE]
    
    for pid_file in pid_files:
        if os.path.exists(pid_file):
            try:
                with open(pid_file, 'r') as f:
                    pid = int(f.read().strip())
                    if psutil.pid_exists(pid):
                        proc = psutil.Process(pid)
                        logging.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
                        proc.terminate()
                        try:
                            proc.wait(timeout=3)
                        except psutil.TimeoutExpired:
                            proc.kill()
            except (ValueError, ProcessLookupError, psutil.NoSuchProcess):
                pass
            try:
                os.remove(pid_file)
            except FileNotFoundError:
                pass
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã
    for port in [5000, 8080]:
        if is_port_in_use(port):
            logging.info(f"–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç {port}...")
            kill_process_on_port(port)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    cleanup_orphaned_processes()
    
    logging.info("üêü –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã '–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞' v2.0 (Flask + cloudflared)")
    logging.info(f"üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    start_bot()
    start_sync_service()
    start_web_app()
    start_miniapp()
    
    logging.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
    logging.info("üìã –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
    logging.info("   - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:5000")
    logging.info("   - Mini App: http://localhost:8080")
    logging.info("üåê –ü—É–±–ª–∏—á–Ω—ã–µ URL –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ cloudflared")
    
    try:
        while running:
            check_processes()
            time.sleep(5)
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        stop_processes()

if __name__ == "__main__":
    main()