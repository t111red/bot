# -*- coding: utf-8 -*-  
import asyncio
import os
import sys
import logging
import sqlite3
import json
import zipfile
from datetime import datetime, timedelta
def adapt_datetime(dt):
    return dt.isoformat()
def convert_datetime(s):
    return datetime.fromisoformat(s.decode())
sqlite3.register_adapter(datetime, adapt_datetime)
sqlite3.register_converter("datetime", convert_datetime)
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
import pytz
from aiogram.exceptions import TelegramForbiddenError
import pandas as pd
from aiogram.types import InputFile
sys.stdout.reconfigure(line_buffering=True)
sys.stderr.reconfigure(line_buffering=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
# ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
TOKEN = "7902503164:AAFUVT64sz45cC22Idgwbr3fN3oAdKhP70k"
ADMIN_IDS = [977248218, 7620299755]
BOOK_LINK = ""  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É —É–¥–∞–ª–µ–Ω–∞
TIMEZONE = pytz.timezone('Asia/Irkutsk')
WORK_HOURS = (8, 18)  # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å 8:00 –¥–æ 18:00
DB_BACKUP_TIME = 20  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ bot.db –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–≤ —á–∞—Å–∞—Ö)
REGULAR_ORDERS_COUNT = 3
PROMO_CODE = "–†–´–ë–ê2025"
GOLD_PROMO = "–ó–û–õ–û–¢–û"
DISCOUNT = 0.9
GOLD_DISCOUNT = 0.9
# –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö
LEAD_EXPIRATION_MINUTES = 15
# –¶–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
PRICES = {
    "–º–∞–ª–µ–Ω—å–∫–∞—è": 450,
    "—Å—Ä–µ–¥–Ω—è—è": 600,
    "–∫—Ä—É–ø–Ω–∞—è": 750
}
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (user_id, –ø—Ä–æ–º–æ–∫–æ–¥)
used_promo_users = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–¥–∞–Ω–Ω–æ–≥–æ (–Ω–æ –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ) –ø—Ä–æ–º–æ–∫–æ–¥–∞ GOLD_PROMO
awarded_gold = {}
LEAD_EXPIRATION_MINUTES = 1440  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (24 —á–∞—Å–∞), —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –ª–∏–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç
# –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏
REVIEWS_CHANNEL_URL = "https://t.me/+i-z81AuC_gxiMzVi"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_API_KEY = os.environ.get("ADMIN_KEY", "admin_access_secret")  # –ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ Notion –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
STATUS_MESSAGES = {
    "–ù–æ–≤—ã–π": "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
    "–í —Ä–∞–±–æ—Ç–µ": "–í–∞—à –∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.",
    "–î–æ—Å—Ç–∞–≤–ª–µ–Ω": "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Å–µ—Ä–≤–∏—Å.",
    "–û—Ç–º–µ–Ω—ë–Ω": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.",
    "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "–í–∞—à –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã."
}

# ==================== –¢–ï–ö–°–¢–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ ====================
WELCOME_TEXT = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ª–µ–≥–∫–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n\n–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂—É—é —Ä—ã–±—É –ø–æ –æ—Ç–ª–∏—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º."
WELCOME_IMAGE_ID = "AgACAgIAAxkBAAIH52e9xLEj0FmF7zWSsGB_Nc1U1k1pAAKE9TEb0hHwSdjSJov3eGfrAQADAgADeAADNgQ"  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
MAKE_ORDER_BUTTON = "üêü–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
ASK_NAME_TEXT = "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
SIZE_PROMPT_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ä—ã–±—ã:"
CART_HEADER_TEXT = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"
PROMO_PROMPT_TEXT = "üéü –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:"
NO_PROMO_BUTTON_TEXT = "–ù–µ—Ç"
# –®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞: –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π, –ø–µ—Ä–µ–¥ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è "(–≤–¥—Ä—É–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è)"
PHONE_PROMPT_TEXT = "üìû {0}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞{1}:"
CALLBACK_PROMPT_TEXT = "‚è∞ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞(8-17):"
ORDER_SUCCESS_TEXT = "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è."
ADMIN_ORDER_TEMPLATE = ("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
                        "–ó–∞–∫–∞–∑ # {0}\n"
                        "üë§ {1}\n"
                        "üìû {2}\n"
                        "üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{3}\n"
                        "üí∞ {4}\n"
                        "üéü –ü—Ä–æ–º–æ–∫–æ–¥: {5}\n"
                        "–°—Ç–∞—Ç—É—Å: {6}")
ORDER_CONFIRMATION_PROMPT = "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ —Å–µ—Ä–≤–∏—Å–µ:"
ADMIN_PANEL_TEXT = "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
NO_HISTORY_TEXT = "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞."
DELETE_ORDER_SUCCESS_TEXT = "‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω."
DELETE_ORDER_FAILURE_TEXT = "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."
FEEDBACK_PROMPT_TEXT = "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤(–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ):"
FEEDBACK_THANKS_TEXT = "üì® –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!"
ADMIN_FEEDBACK_TEMPLATE = "üìù –û—Ç–∑—ã–≤ –æ—Ç {0}:\n\n{1}"
NEW_ORDER_PROMPT = "–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?"
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
COMPLAINT_PROMPT_TEXT = "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ(–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ):"
COMPLAINT_THANKS_TEXT = "üì® –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
ADMIN_COMPLAINT_TEMPLATE = "üìù –ñ–∞–ª–æ–±–∞/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {0}:\n\n{1}"
STAGE_NAMES = {
    "OrderState:waiting_name": "–≠—Ç–∞–ø –≤–≤–æ–¥–∞ –§–ò–û",
    "OrderState:waiting_size": "–≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ä—ã–±—ã",
    "OrderState:waiting_promo": "–≠—Ç–∞–ø –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
    "OrderState:waiting_phone": "–≠—Ç–∞–ø –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    "OrderState:waiting_callback_time": "–≠—Ç–∞–ø —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–≤–æ–Ω–∫–∞",
}
ORDER_RECOVERY_PROMPT = "–£ –≤–∞—Å –±—ã–ª –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?"
ORDER_RECOVERY_BTN = "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"
ORDER_START_NEW_BTN = "üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"
# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
def init_db():
    conn = sqlite3.connect('bot.db', detect_types=sqlite3.PARSE_DECLTYPES)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ orders
    cursor.execute('''CREATE TABLE IF NOT EXISTS orders(
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        full_name TEXT,
        items TEXT,
        total REAL,
        promo_used TEXT,
        phone TEXT,
        status TEXT DEFAULT '–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω',
        confirmed INTEGER DEFAULT 0,
        callback_time INTEGER,
        timestamp DATETIME,
        notion_page_id TEXT)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ leads
    cursor.execute('''CREATE TABLE IF NOT EXISTS leads(
        id INTEGER PRIMARY KEY,  
        user_id INTEGER UNIQUE,  
        data TEXT,  
        stage TEXT,  
        timestamp DATETIME,  
        is_repeat INTEGER DEFAULT 0,
        is_completed INTEGER DEFAULT 0,        
        expired INTEGER DEFAULT 0,
        order_id INTEGER,
        notion_page_id TEXT,
        synced_to_notion INTEGER DEFAULT 0)''')  # –ü–æ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion
    
    # –¢–∞–±–ª–∏—Ü–∞ order_statuses –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''CREATE TABLE IF NOT EXISTS order_statuses(
        id INTEGER PRIMARY KEY,
        order_id INTEGER,
        status TEXT,
        timestamp DATETIME,
        notified INTEGER DEFAULT 0,
        FOREIGN KEY(order_id) REFERENCES orders(id))''')
        
    cursor.execute("PRAGMA table_info(orders)")
    columns = cursor.fetchall()
    column_names = [column[1] for column in columns]
    if 'notion_page_id' not in column_names:
        cursor.execute('ALTER TABLE orders ADD COLUMN notion_page_id TEXT')
        
    conn.commit()
    conn.close()

def update_db():
    conn = sqlite3.connect('bot.db', detect_types=sqlite3.PARSE_DECLTYPES)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü expired –≤ —Ç–∞–±–ª–∏—Ü–µ leads
    cursor.execute("PRAGMA table_info(leads)")
    columns = cursor.fetchall()
    column_names = [column[1] for column in columns]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü expired, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'expired' not in column_names:
        cursor.execute('''ALTER TABLE leads ADD COLUMN expired INTEGER DEFAULT 0''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü version, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'version' not in column_names:
        cursor.execute('''ALTER TABLE leads ADD COLUMN version INTEGER DEFAULT 1''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü history, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'history' not in column_names:
        cursor.execute('''ALTER TABLE leads ADD COLUMN history TEXT''')
        
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü notion_page_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'notion_page_id' not in column_names:
        cursor.execute('''ALTER TABLE leads ADD COLUMN notion_page_id TEXT''')
        
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü synced_to_notion, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'synced_to_notion' not in column_names:
        cursor.execute('''ALTER TABLE leads ADD COLUMN synced_to_notion INTEGER DEFAULT 0''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ order_statuses
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='order_statuses'")
    if not cursor.fetchone():
        cursor.execute('''CREATE TABLE order_statuses(
            id INTEGER PRIMARY KEY,
            order_id INTEGER,
            status TEXT,
            timestamp DATETIME,
            notified INTEGER DEFAULT 0,
            FOREIGN KEY(order_id) REFERENCES orders(id))''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ failed_notifications
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='failed_notifications'")
    if not cursor.fetchone():
        cursor.execute('''CREATE TABLE failed_notifications(
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            message TEXT,
            created_at DATETIME,
            last_attempt DATETIME,
            attempts INTEGER DEFAULT 1)''')
    
    conn.commit()
    conn.close()

init_db()
update_db()

# ==================== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def get_current_time():
    return datetime.now(TIMEZONE)

def db_execute(query, params=()):
    conn = None
    cursor = None
    try:
        conn = sqlite3.connect('bot.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        cursor.execute(query, params)
        
        # –ï—Å–ª–∏ —ç—Ç–æ INSERT –∑–∞–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º lastrowid
        lastrowid = None
        if query.strip().upper().startswith("INSERT"):
            lastrowid = cursor.lastrowid
            
        conn.commit()
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å SELECT, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if query.strip().upper().startswith("SELECT"):
            results = cursor.fetchall()
            cursor.close()
            conn.close()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å–æ—Ä –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            class ResultCursor:
                def __init__(self, results, lastrowid=None):
                    self.results = results
                    self.position = 0
                    self.lastrowid = lastrowid
                
                def fetchone(self):
                    if self.position < len(self.results):
                        result = self.results[self.position]
                        self.position += 1
                        return result
                    return None
                
                def fetchall(self):
                    remaining = self.results[self.position:]
                    self.position = len(self.results)
                    return remaining
            
            return ResultCursor(results)
        
        # –î–ª—è –Ω–µ-SELECT –∑–∞–ø—Ä–æ—Å–æ–≤, –∏–º–∏—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        class NonSelectCursor:
            def __init__(self, lastrowid=None):
                self.lastrowid = lastrowid
                
            def fetchone(self):
                return None
                
            def fetchall(self):
                return []
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if cursor:
            cursor.close()
        if conn:
            conn.close()
            
        # –î–ª—è INSERT –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä —Å lastrowid
        if query.strip().upper().startswith("INSERT"):
            return NonSelectCursor(lastrowid)
            
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫—É—Ä—Å–æ—Ä
        return NonSelectCursor()
    except sqlite3.Error as e:
        logging.error(f"Database error: {e}")
        if cursor:
            cursor.close()
        if conn:
            conn.close()
        raise

def is_working_time():
    current_hour = get_current_time().hour
    return WORK_HOURS[0] <= current_hour < WORK_HOURS[1]

def is_regular_client(user_id):
    cursor = db_execute("SELECT COUNT(*) FROM orders WHERE user_id = ? AND confirmed = 1", (user_id,))
    result = cursor.fetchone()
    count = result[0] if result else 0
    return count >= REGULAR_ORDERS_COUNT
    
def get_name_and_initial(full_name):
    parts = full_name.split()
    if len(parts) >= 2:
        name = parts[0]
        initial = parts[1][0] + "."
        return f"{name} {initial}"
    return full_name  # –ï—Å–ª–∏ —Ñ–∞–º–∏–ª–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è

def get_user_info(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∑–∞–∫–∞–∑–∞—Ö
        cursor = db_execute(
            "SELECT full_name, phone, COUNT(*) as orders_count FROM orders WHERE user_id = ? GROUP BY full_name, phone ORDER BY COUNT(*) DESC LIMIT 1", 
            (user_id,)
        )
        result = cursor.fetchone()
        
        if result:
            return {
                "full_name": result[0], 
                "phone": result[1],
                "orders_count": result[2],
                "is_regular": result[2] >= REGULAR_ORDERS_COUNT
            }
            
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–∏–¥–∞—Ö
        cursor = db_execute(
            "SELECT data FROM leads WHERE user_id = ? AND expired = 0 ORDER BY timestamp DESC LIMIT 1", 
            (user_id,)
        )
        result = cursor.fetchone()
        
        if result and result[0]:
            try:
                data = json.loads(result[0])
                if data.get("full_name") and data.get("phone"):
                    return {
                        "full_name": data.get("full_name"),
                        "phone": data.get("phone"),
                        "orders_count": 0,
                        "is_regular": False
                    }
            except json.JSONDecodeError:
                pass
                
        return None
    except Exception as e:
        logging.error(f"Error getting user info: {e}")
        return None

def get_lead_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ª–∏–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        cursor = db_execute(
            "SELECT id, data, stage, is_completed, expired FROM leads WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1", 
            (user_id,)
        )
        result = cursor.fetchone()
        
        if not result:
            return None
            
        lead_id, data_json, stage, is_completed, expired = result
        
        # –ï—Å–ª–∏ –ª–∏–¥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ (expired=1), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if is_completed or (expired is not None and expired == 1):
            return None
            
        try:
            data = json.loads(data_json) if data_json else {}
            return {
                "id": lead_id,
                "data": data,
                "stage": stage
            }
        except json.JSONDecodeError:
            logging.error(f"Failed to decode lead data JSON for user {user_id}")
            return None
    except Exception as e:
        logging.error(f"Error retrieving lead data for user {user_id}: {e}")
        return None

def expire_old_leads():
    """–ü–æ–º–µ—á–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ª–∏–¥—ã –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–º."""
    expiration_time = datetime.now() - timedelta(minutes=LEAD_EXPIRATION_MINUTES)
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –ø–æ–º–µ—á–∞—Ç—å –∏—Ö –∫–∞–∫ expired
        result = db_execute(
            """UPDATE leads SET expired = 1 
               WHERE timestamp < ? AND is_completed = 0 AND (expired = 0 OR expired IS NULL)
               AND id NOT IN (
                   SELECT MAX(id) FROM leads 
                   WHERE is_completed = 0 AND (expired = 0 OR expired IS NULL)
                   GROUP BY user_id
               )""",
            (expiration_time,)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
        affected_rows = result.rowcount if hasattr(result, 'rowcount') else 0
        if affected_rows > 0:
            logging.info(f"–ü–æ–º–µ—Ç–∏–ª {affected_rows} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–∏–¥–æ–≤ —Å—Ç–∞—Ä—à–µ {expiration_time}")
        else:
            logging.info(f"Expired old leads older than {expiration_time}")
    except Exception as e:
        logging.error(f"Failed to expire old leads: {e}")
        import traceback
        logging.error(f"Exception traceback: {traceback.format_exc()}")

def update_lead(user_id, data, stage, is_completed=False, order_id=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ª–∏–¥–∞."""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
        data_json = json.dumps(data) if data else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏–¥
        cursor = db_execute(
            "SELECT id FROM leads WHERE user_id = ? AND is_completed = 0 AND (expired = 0 OR expired IS NULL)", 
            (user_id,)
        )
        existing_lead = cursor.fetchone()
        
        current_time = datetime.now()
        
        if existing_lead:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏–¥
            lead_id = existing_lead[0]
            db_execute(
                "UPDATE leads SET data = ?, stage = ?, timestamp = ?, is_completed = ?, expired = 0, order_id = ? WHERE id = ?",
                (data_json, stage, current_time, 1 if is_completed else 0, order_id, lead_id)
            )
            logging.info(f"Updated lead {lead_id} for user {user_id}, stage: {stage}")
            return lead_id
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ –ª–∏–¥–∞ –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = db_execute(
                "SELECT id FROM leads WHERE user_id = ? AND (expired = 1 OR is_completed = 1) ORDER BY timestamp DESC LIMIT 1", 
                (user_id,)
            )
            expired_lead = cursor.fetchone()
            
            if expired_lead:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π –ª–∏–¥ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
                lead_id = expired_lead[0]
                db_execute(
                    "UPDATE leads SET data = ?, stage = ?, timestamp = ?, is_completed = 0, expired = 0, order_id = ? WHERE id = ?",
                    (data_json, stage, current_time, order_id, lead_id)
                )
                logging.info(f"Reactivated expired lead {lead_id} for user {user_id}, stage: {stage}")
                return lead_id
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–¥
                is_repeat = 1 if get_user_info(user_id) else 0
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                cursor = db_execute(
                    """INSERT INTO leads 
                       (user_id, data, stage, timestamp, is_repeat, is_completed, expired, order_id) 
                       VALUES (?, ?, ?, ?, ?, ?, 0, ?)""",
                    (user_id, data_json, stage, current_time, is_repeat, 1 if is_completed else 0, order_id)
                )
                
                lead_id = cursor.lastrowid
                logging.info(f"Created new lead {lead_id} for user {user_id}, stage: {stage}, is_repeat: {is_repeat}")
                return lead_id
    except Exception as e:
        logging.error(f"Failed to update lead for user {user_id}: {e}")
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import traceback
        logging.error(f"Exception traceback: {traceback.format_exc()}")
        return None

def track_order_status(order_id, status):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
    try:
        db_execute(
            "INSERT INTO order_statuses (order_id, status, timestamp, notified) VALUES (?, ?, ?, 0)",
            (order_id, status, datetime.now())
        )
        logging.info(f"Tracked new status '{status}' for order {order_id}")
    except Exception as e:
        logging.error(f"Failed to track status for order {order_id}: {e}")

def save_failed_notification(user_id, message_text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."""
    try:
        db_execute(
            "INSERT INTO failed_notifications (user_id, message, created_at, last_attempt, attempts) VALUES (?, ?, ?, ?, 1)",
            (user_id, message_text, datetime.now(), datetime.now())
        )
        logging.info(f"Saved failed notification for user {user_id} for retry later")
        return True
    except Exception as e:
        logging.error(f"Failed to save failed notification: {e}")
        return False

async def retry_failed_notifications(bot):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑
        cursor = db_execute(
            "SELECT id, user_id, message FROM failed_notifications WHERE attempts < 5"
        )
        notifications = cursor.fetchall()
        
        if not notifications:
            return 0
            
        success_count = 0
        for notification_id, user_id, message in notifications:
            try:
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await bot.send_message(user_id, message, parse_mode="HTML")
                
                # –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                db_execute("DELETE FROM failed_notifications WHERE id = ?", (notification_id,))
                success_count += 1
                logging.info(f"Successfully resent notification #{notification_id} to user {user_id}")
            except Exception as e:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                db_execute(
                    "UPDATE failed_notifications SET attempts = attempts + 1, last_attempt = ? WHERE id = ?",
                    (datetime.now(), notification_id)
                )
                logging.warning(f"Failed to resend notification #{notification_id} to user {user_id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        week_ago = datetime.now() - timedelta(days=7)
        db_execute("DELETE FROM failed_notifications WHERE created_at < ?", (week_ago,))
        
        return success_count
    except Exception as e:
        logging.error(f"Error in retry_failed_notifications: {e}")
        return 0

async def notify_status_change(bot, order_id, status):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        cursor = db_execute("""
            SELECT orders.user_id, orders.full_name, orders.phone, orders.items 
            FROM orders 
            WHERE orders.id = ?
        """, (order_id,))
        result = cursor.fetchone()
        
        if not result:
            logging.error(f"Order {order_id} not found for status notification")
            return False
            
        user_id, full_name, phone, items_json = result
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç
        if status.lower() == "–≤ —Ä–∞–±–æ—Ç–µ":
            # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–í —Ä–∞–±–æ—Ç–µ" –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É
            send_to_user = True
            user_message = "–í–∞—à –∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
        elif status.lower() in ["–∑–∞–≤–µ—Ä—à–µ–Ω", "–∑–∞–≤–µ—Ä—à—ë–Ω", "–≤—ã–ø–æ–ª–Ω–µ–Ω", "–Ω–æ–≤—ã–π"]:
            # –î–ª—è —ç—Ç–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            send_to_user = False
            user_message = ""
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            send_to_user = True
            user_message = f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        items = json.loads(items_json) if items_json else []
        admin_message = (
            f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {full_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üìã <b>–ó–∞–∫–∞–∑:</b> {', '.join(items) if isinstance(items, list) else str(items)}\n"
            f"üìä <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {status}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        user_notified = False
        if send_to_user and user_message:
            try:
                await bot.send_message(user_id, user_message, parse_mode="HTML")
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                user_notified = True
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if not isinstance(e, TelegramForbiddenError):  # –ï—Å–ª–∏ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–æ—Ç–∞
                    save_failed_notification(user_id, user_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_notified_count = 0
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, admin_message, parse_mode="HTML")
                admin_notified_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        db_execute(
            "UPDATE order_statuses SET notified = 1 WHERE order_id = ? AND status = ?",
            (order_id, status)
        )
        
        return user_notified or admin_notified_count > 0
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ notify_status_change –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        return False

# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ====================
class OrderState(StatesGroup):
    waiting_name = State()
    waiting_size = State()
    waiting_promo = State()
    waiting_phone = State()
    waiting_callback_time = State()

class DeleteOrderState(StatesGroup):
    waiting_order_id = State()

class FeedbackState(StatesGroup):
    waiting_text = State()

class ComplaintState(StatesGroup):
    waiting_text = State()
    
class BroadcastState(StatesGroup):
    waiting_message = State()

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

def main_menu_keyboard():
    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è WebApp
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω Replit
    replit_domain = os.environ.get("REPLIT_DOMAINS", "").split(",")[0]
    if not replit_domain:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π URL, –µ—Å–ª–∏ REPLIT_DOMAINS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        replit_domain = "gold-fish-bot.replit.app"
        
    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è Telegram mini-app
    webapp_url = f"https://{replit_domain}/mini_app"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", web_app={"url": webapp_url})]
    ])

def size_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ú–∞–ª–µ–Ω—å–∫–∞—è")],
            [types.KeyboardButton(text="–°—Ä–µ–¥–Ω—è—è")],
            [types.KeyboardButton(text="–ö—Ä—É–ø–Ω–∞—è")],
            [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"),
             types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")]
        ],
        resize_keyboard=True
    )

def promo_keyboard():
    button_text = NO_PROMO_BUTTON_TEXT if 'NO_PROMO_BUTTON_TEXT' in globals() else "–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, callback_data="no_promo")]
    ])

def phone_unchanged_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", callback_data="phone_not_changed")]
    ])

def recovery_keyboard():
    continue_btn_text = ORDER_RECOVERY_BTN if 'ORDER_RECOVERY_BTN' in globals() else "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑"
    new_btn_text = ORDER_START_NEW_BTN if 'ORDER_START_NEW_BTN' in globals() else "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=continue_btn_text, callback_data="continue_order")],
        [InlineKeyboardButton(text=new_btn_text, callback_data="new_order")]
    ])

# ==================== –û–°–ù–û–í–ù–û–ô –ö–û–î ====================
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("admin"))
async def admin_panel_access(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –¥–æ–º–µ–Ω–æ–º Replit
    base_url = os.environ.get("REPLIT_DOMAINS", "")
    if base_url:
        base_url = f"https://{base_url}"
    else:
        base_url = "https://6111cce6-da00-4d3f-9152-89fd7833c233-00-115ombxz6wayd.pike.replit.dev"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_url = f"{base_url}/login?auto_login=true&admin_key={os.environ.get('ADMIN_KEY', 'admin_access_secret')}"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîê –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", url=admin_url)]
    ])
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n"
        "–í –Ω–µ–π –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –ª–∏–¥–∞–º–∏ (–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏)\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Notion",
        reply_markup=keyboard
    )

@dp.message(Command("start"))
async def main_page(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    incomplete_lead = get_lead_data(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    cursor = db_execute("SELECT COUNT(*) FROM orders WHERE user_id = ?", (user_id,))
    order_count = cursor.fetchone()[0]
    
    await message.answer_photo(
        WELCOME_IMAGE_ID, 
        caption=WELCOME_TEXT,
        reply_markup=main_menu_keyboard()
    )
    
    # –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    # –ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ - –∑–∞–∫–∞–∑—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

@dp.callback_query(lambda c: c.data == "continue_order")
async def process_continue_order(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    incomplete_lead = get_lead_data(user_id)
    
    if not incomplete_lead:
        await callback_query.answer("–ó–∞–∫–∞–∑ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
        await callback_query.message.edit_text(
            "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    lead_stage = incomplete_lead["stage"]
    lead_data = incomplete_lead["data"]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(lead_data)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    if lead_stage == "OrderState:waiting_name":
        await state.set_state(OrderState.waiting_name)
        await callback_query.message.answer(ASK_NAME_TEXT)
    elif lead_stage == "OrderState:waiting_size":
        await state.set_state(OrderState.waiting_size)
        await callback_query.message.answer(SIZE_PROMPT_TEXT, reply_markup=size_keyboard())
    elif lead_stage == "OrderState:waiting_promo":
        await state.set_state(OrderState.waiting_promo)
        await callback_query.message.answer(PROMO_PROMPT_TEXT, reply_markup=promo_keyboard())
    elif lead_stage == "OrderState:waiting_phone":
        await state.set_state(OrderState.waiting_phone)
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞
        full_name = lead_data.get("full_name", "")
        is_repeat = get_user_info(user_id) is not None
        phone_prompt_suffix = " (–≤–¥—Ä—É–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è)" if is_repeat else ""
        await callback_query.message.answer(
            PHONE_PROMPT_TEXT.format(full_name, phone_prompt_suffix),
            reply_markup=phone_unchanged_keyboard() if is_repeat else None
        )
    elif lead_stage == "OrderState:waiting_callback_time":
        await state.set_state(OrderState.waiting_callback_time)
        await callback_query.message.answer(CALLBACK_PROMPT_TEXT)
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await state.clear()
        await callback_query.message.answer(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π.",
            reply_markup=main_menu_keyboard()
        )
    
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "new_order")
async def process_new_order(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–º–µ—á–∞–µ–º –ª–∏–¥ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–π
    user_id = callback_query.from_user.id
    db_execute(
        "UPDATE leads SET expired = 1 WHERE user_id = ? AND is_completed = 0 AND expired = 0", 
        (user_id,)
    )
    
    await state.clear()
    await callback_query.answer()
    await process_make_order(callback_query, state)

@dp.callback_query(lambda c: c.data == "make_order")
async def process_make_order(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.update_data(cart=[])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã
    user_id = callback_query.from_user.id
    user_info = get_user_info(user_id)
    
    await state.set_state(OrderState.waiting_name)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–∫–∞–∑, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–º—è
    if user_info and user_info.get("full_name"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {user_info['full_name']}", callback_data="use_previous_name")]
        ])
        await callback_query.message.answer(ASK_NAME_TEXT, reply_markup=keyboard)
    else:
        await callback_query.message.answer(ASK_NAME_TEXT)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–¥
    update_lead(user_id, {}, "OrderState:waiting_name")
    
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "use_previous_name")
async def use_previous_name(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_info = get_user_info(user_id)
    
    if user_info and user_info.get("full_name"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è
        await state.update_data(full_name=user_info["full_name"])
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(OrderState.waiting_size)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
        state_data = await state.get_data()
        update_lead(user_id, state_data, "OrderState:waiting_size")
        
        await callback_query.message.answer(SIZE_PROMPT_TEXT, reply_markup=size_keyboard())
    else:
        await callback_query.message.answer(ASK_NAME_TEXT)
    
    await callback_query.answer()

@dp.message(OrderState.waiting_name)
async def process_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
    user_id = message.from_user.id
    state_data = await state.get_data()
    update_lead(user_id, state_data, "OrderState:waiting_size")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞
    await state.set_state(OrderState.waiting_size)
    await message.answer(SIZE_PROMPT_TEXT, reply_markup=size_keyboard())

@dp.message(OrderState.waiting_size)
async def process_size(message: types.Message, state: FSMContext):
    text = message.text.lower()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    state_data = await state.get_data()
    cart = state_data.get("cart", [])
    
    if text == "‚ùå –æ—Ç–º–µ–Ω–∞":
        # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        await main_page(message, state)
        return
    
    if text == "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        if not cart:
            await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä —Ä—ã–±—ã.")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await state.set_state(OrderState.waiting_promo)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
        user_id = message.from_user.id
        state_data = await state.get_data()
        update_lead(user_id, state_data, "OrderState:waiting_promo")
        
        await message.answer(
            f"{CART_HEADER_TEXT}\n" + "\n".join([f"- {item}" for item in cart]),
            reply_markup=ReplyKeyboardRemove()
        )
        await message.answer(PROMO_PROMPT_TEXT, reply_markup=promo_keyboard())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä—ã–±—ã
    if text in ["–º–∞–ª–µ–Ω—å–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–∫—Ä—É–ø–Ω–∞—è"]:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.append(text.capitalize())
        await state.update_data(cart=cart)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
        user_id = message.from_user.id
        state_data = await state.get_data()
        update_lead(user_id, state_data, "OrderState:waiting_size")
        
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {text.capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–∞ —Ä—ã–±—ã.")

@dp.callback_query(lambda c: c.data == "no_promo")
async def no_promo(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(promo_code="")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await process_promo_code(callback_query.message, state)
    await callback_query.answer()

@dp.message(OrderState.waiting_promo)
async def process_promo(message: types.Message, state: FSMContext):
    promo_code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å "–†–´–ë–ê2025" –∏ "–ó–û–õ–û–¢–û"
    valid_promos = ["–†–´–ë–ê2025", "–ó–û–õ–û–¢–û"]
    if promo_code and promo_code not in valid_promos:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞'.", 
                            reply_markup=promo_keyboard())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    await state.update_data(promo_code=promo_code)
    
    # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –æ —Ä–∞–∑–º–µ—Ä–µ —Å–∫–∏–¥–∫–∏
    if promo_code == "–†–´–ë–ê2025":
        await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '–†–´–ë–ê2025' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞ 10%")
    elif promo_code == "–ó–û–õ–û–¢–û":
        await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '–ó–û–õ–û–¢–û' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞ 20%") 
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
    user_id = message.from_user.id
    state_data = await state.get_data()
    update_lead(user_id, state_data, "OrderState:waiting_phone")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await process_promo_code(message, state)

async def process_promo_code(message: types.Message, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(OrderState.waiting_phone)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    state_data = await state.get_data()
    full_name = state_data.get("full_name", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã
    user_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
    user_info = get_user_info(user_id)
    is_repeat = user_info is not None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    phone_prompt_suffix = " (–≤–¥—Ä—É–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è)" if is_repeat else ""
    
    await message.answer(
        PHONE_PROMPT_TEXT.format(full_name, phone_prompt_suffix),
        reply_markup=phone_unchanged_keyboard() if is_repeat else None
    )

@dp.callback_query(lambda c: c.data == "phone_not_changed")
async def phone_not_changed(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_info = get_user_info(user_id)
    
    if user_info and user_info.get("phone"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.update_data(phone=user_info["phone"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if is_working_time():
            # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
            await complete_order(callback_query.message, state)
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
            await state.set_state(OrderState.waiting_callback_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
            state_data = await state.get_data()
            update_lead(user_id, state_data, "OrderState:waiting_callback_time")
            
            await callback_query.message.answer(CALLBACK_PROMPT_TEXT)
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.")
    
    await callback_query.answer()

@dp.message(OrderState.waiting_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if not phone.replace("+", "").replace(" ", "").isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await state.update_data(phone=phone)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
    user_id = message.from_user.id
    state_data = await state.get_data()
    update_lead(user_id, state_data, "OrderState:waiting_callback_time" if not is_working_time() else "completed")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    if is_working_time():
        # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        await complete_order(message, state)
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        await state.set_state(OrderState.waiting_callback_time)
        await message.answer(CALLBACK_PROMPT_TEXT)

@dp.message(OrderState.waiting_callback_time)
async def process_callback_time(message: types.Message, state: FSMContext):
    time_text = message.text.strip()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        callback_time = int(time_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if callback_time < 8 or callback_time > 17:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å 8 –¥–æ 17 —á–∞—Å–æ–≤.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        await state.update_data(callback_time=callback_time)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        await complete_order(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å –¥–ª—è –∑–≤–æ–Ω–∫–∞).")

async def complete_order(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        user_id = message.chat.id if hasattr(message, 'chat') else message.from_user.id
        full_name = state_data.get("full_name", "")
        cart = state_data.get("cart", [])
        phone = state_data.get("phone", "")
        promo_code = state_data.get("promo_code", "")
        callback_time = state_data.get("callback_time")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        total_sum = sum(PRICES.get(item.lower(), 0) for item in cart)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–æ–≤—É—é —Å–∫–∏–¥–∫—É (–µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ >= 4)
        if len(cart) >= 4:
            wholesale_discount = 0.9  # 10% —Å–∫–∏–¥–∫–∞
            total_sum *= wholesale_discount
            logging.info(f"Applied wholesale discount for user {user_id}: {len(cart)} items")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
        if promo_code == PROMO_CODE:
            total_sum *= DISCOUNT
            used_promo_users[user_id] = PROMO_CODE
            logging.info(f"Applied promo code {PROMO_CODE} for user {user_id}")
        elif promo_code == GOLD_PROMO:
            total_sum *= GOLD_DISCOUNT
            used_promo_users[user_id] = GOLD_PROMO
            logging.info(f"Applied promo code {GOLD_PROMO} for user {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        cursor = db_execute(
            "INSERT INTO orders (user_id, full_name, items, total, promo_used, phone, callback_time, timestamp) "
            "VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, full_name, json.dumps(cart), total_sum, promo_code, phone, callback_time, datetime.now())
        )
        order_id = cursor.lastrowid
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∑–∞–∫–∞–∑—É
        update_lead(user_id, state_data, "completed", True, order_id)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        track_order_status(order_id, "–ù–æ–≤—ã–π")
        
        # Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
        cart_summary = ", ".join([f"{item}" for item in cart])
        admin_notification = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}!\n"
            f"–ó–∞–∫–∞–∑: {cart_summary}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {full_name}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, admin_notification)
                logging.info(f"Admin notification sent to {admin_id} for order #{order_id}")
            except Exception as e:
                logging.error(f"Failed to send admin notification to {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(ORDER_SUCCESS_TEXT)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        # await message.answer(
        #     ORDER_CONFIRMATION_PROMPT,
        #     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        #         [InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"feedback_{order_id}")]
        #     ])
        # )
        
        logging.info(f"Order {order_id} created successfully for user {user_id}")
        
        return order_id
    except Exception as e:
        logging.error(f"Error completing order: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return None

# –§—É–Ω–∫—Ü–∏—è sync_notion_data —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

@dp.callback_query(lambda c: c.data == "history")
async def show_history(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = db_execute(
            "SELECT id, items, total, timestamp, status FROM orders WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10",
            (user_id,)
        )
        
        orders = cursor.fetchall()
        
        if not orders:
            await callback_query.message.answer(NO_HISTORY_TEXT)
            await callback_query.answer()
            return
            
        history_text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n\n"
        
        for order in orders:
            order_id, items_json, total, timestamp, status = order
            items = json.loads(items_json) if items_json else []
            order_date = timestamp.strftime("%d.%m.%Y %H:%M")
            
            history_text += f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç {order_date}\n"
            history_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            history_text += "–°–æ—Å—Ç–∞–≤:\n"
            
            for item in items:
                history_text += f"- {item}\n"
                
            history_text += f"–°—É–º–º–∞: {total} ‚ÇΩ\n\n"
            
        await callback_query.message.answer(history_text)
    else:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–∫–∞–∑–æ–≤
        cursor = db_execute(
            "SELECT orders.id, orders.user_id, orders.full_name, orders.items, orders.total, orders.timestamp, "
            "orders.status, orders.notion_page_id FROM orders ORDER BY timestamp DESC LIMIT 20"
        )
        
        orders = cursor.fetchall()
        
        if not orders:
            await callback_query.message.answer(NO_HISTORY_TEXT)
            await callback_query.answer()
            return
            
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        df = pd.DataFrame(
            orders, 
            columns=["ID", "User ID", "Name", "Items", "Total", "Date", "Status", "Notion ID"]
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∏
        df["Items"] = df["Items"].apply(lambda x: ", ".join(json.loads(x)) if x else "")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        df["Date"] = df["Date"].apply(lambda x: x.strftime("%d.%m.%Y %H:%M") if x else "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        df.to_excel("orders_history.xlsx", index=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open("orders_history.xlsx", "rb") as file:
            await callback_query.message.answer_document(
                types.BufferedInputFile(
                    file.read(),
                    filename="orders_history.xlsx"
                ),
                caption="üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"
            )
    
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "delete_order")
async def delete_order_request(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
        
    await state.set_state(DeleteOrderState.waiting_order_id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await callback_query.answer()

@dp.message(DeleteOrderState.waiting_order_id)
async def delete_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        await state.clear()
        return
        
    try:
        order_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        cursor = db_execute("SELECT id FROM orders WHERE id = ?", (order_id,))
        order = cursor.fetchone()
        
        if not order:
            await message.answer(DELETE_ORDER_FAILURE_TEXT)
        else:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
            db_execute("DELETE FROM orders WHERE id = ?", (order_id,))
            db_execute("DELETE FROM order_statuses WHERE order_id = ?", (order_id,))
            
            await message.answer(DELETE_ORDER_SUCCESS_TEXT)
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        await main_page(message, FSMContext(MemoryStorage(), message.chat.id, dp))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–∫–∞–∑–∞.")

@dp.callback_query(lambda c: c.data == "broadcast")
async def broadcast_request(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
        
    await state.set_state(BroadcastState.waiting_message)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await callback_query.answer()

@dp.message(BroadcastState.waiting_message)
async def process_broadcast(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        await state.clear()
        return
        
    broadcast_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor = db_execute("SELECT DISTINCT user_id FROM orders")
    users = cursor.fetchall()
    
    total_count = len(users)
    success_count = 0
    error_count = 0
    
    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {total_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    for user in users:
        recipient_id = user[0]
        try:
            await bot.send_message(recipient_id, broadcast_text)
            success_count += 1
        except Exception as e:
            logging.error(f"Failed to send broadcast to user {recipient_id}: {e}")
            error_count += 1
    
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úì –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚úó –û—à–∏–±–æ–∫: {error_count}")
    await state.clear()

@dp.callback_query(lambda c: c.data == "complaints")
async def complaint_request(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(ComplaintState.waiting_text)
    await callback_query.message.answer(COMPLAINT_PROMPT_TEXT)
    await callback_query.answer()

@dp.message(ComplaintState.waiting_text)
async def process_complaint(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    
    complaint_text = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_message = ADMIN_COMPLAINT_TEMPLATE.format(full_name, complaint_text)
    
    for admin_id in ADMIN_IDS:
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
            if message.photo:
                await bot.send_photo(
                    admin_id,
                    message.photo[-1].file_id,
                    caption=admin_message
                )
            else:
                await bot.send_message(admin_id, admin_message)
        except Exception as e:
            logging.error(f"Failed to send complaint to admin {admin_id}: {e}")
    
    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(COMPLAINT_THANKS_TEXT)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("feedback_"))
async def feedback_request(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = int(callback_query.data.split("_")[1])
    await state.update_data(order_id=order_id)
    await state.set_state(FeedbackState.waiting_text)
    await callback_query.message.answer(FEEDBACK_PROMPT_TEXT)
    await callback_query.answer()

@dp.message(FeedbackState.waiting_text)
async def process_feedback(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    order_id = state_data.get("order_id")
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    
    feedback_text = message.text
    
    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(FEEDBACK_THANKS_TEXT)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_message = ADMIN_FEEDBACK_TEMPLATE.format(full_name, feedback_text)
    if order_id:
        admin_message += f"\n\n–û—Ç–∑—ã–≤ –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
            if message.photo:
                await bot.send_photo(
                    admin_id,
                    message.photo[-1].file_id,
                    caption=admin_message
                )
            else:
                await bot.send_message(admin_id, admin_message)
        except Exception as e:
            logging.error(f"Failed to send feedback to admin {admin_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    await message.answer(
        NEW_ORDER_PROMPT,
        reply_markup=main_menu_keyboard()
    )

@dp.message(Command("backup"))
async def send_backup(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with open('bot.db', 'rb') as file:
            await bot.send_document(
                user_id, 
                types.BufferedInputFile(
                    file.read(),
                    filename="bot_backup.db"
                ),
                caption="üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            )
        await message.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"Failed to send DB backup: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

@dp.message(Command("archive"))
async def archive_files(message: types.Message):
    """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
    progress_message = await message.answer("‚è≥ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞...")
    
    try:
        import shutil
        import os
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
        current_dir = os.path.dirname(os.path.abspath(__file__))
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
        archive_dir = os.path.join(current_dir, "export_files")
        archive_name = f"bot_files_{timestamp}"
        archive_path = os.path.join(archive_dir, f"{archive_name}.zip")
        readme_path = os.path.join(archive_dir, "README.md")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(archive_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º README.md —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        with open(readme_path, 'w', encoding='utf-8') as readme:
            readme.write("""# Telegram –±–æ—Ç "–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞" üêü

## –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

–≠—Ç–æ Telegram-–±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ —Ä—ã–±—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å Notion CRM. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ä—ã–±—É —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Telegram Mini App (WebApp).

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

### –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã

- **botf.py** - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å –ª–æ–≥–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –∫–æ–ª–ª–±—ç–∫–æ–≤ –∏ WebApp –¥–∞–Ω–Ω—ã—Ö
- **run.py** - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
- **sync_service.py** - –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ Notion CRM
- **notion_integration.py** - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∏ –ª–∏–¥–∞–º–∏
- **main.py** - Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ WebApp
- **static/** - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JavaScript, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  - **webapp/** - –§–∞–π–ª—ã –¥–ª—è Telegram Mini App (WebApp)
- **templates/** - HTML —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- **bot.db** - SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤, –ª–∏–¥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö

### –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

–í –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite —Å —Ç—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏:
- **orders** - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö
- **leads** - –î–∞–Ω–Ω—ã–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö (–ª–∏–¥–∞—Ö)
- **order_statuses** - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤

## –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python

–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Å–ª–µ–¥—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:

```
aiogram==3.0.0 –∏–ª–∏ –≤—ã—à–µ
flask==2.0.0 –∏–ª–∏ –≤—ã—à–µ
flask-login==0.6.0 –∏–ª–∏ –≤—ã—à–µ
flask-session==0.5.0 –∏–ª–∏ –≤—ã—à–µ
flask-sqlalchemy==3.0.0 –∏–ª–∏ –≤—ã—à–µ
flask-wtf==1.1.0 –∏–ª–∏ –≤—ã—à–µ
gunicorn==23.0.0 –∏–ª–∏ –≤—ã—à–µ
pandas==2.0.0 –∏–ª–∏ –≤—ã—à–µ
psutil==5.9.0 –∏–ª–∏ –≤—ã—à–µ
psycopg2-binary==2.9.0 –∏–ª–∏ –≤—ã—à–µ 
pytz==2022.0 –∏–ª–∏ –≤—ã—à–µ
requests==2.28.0 –∏–ª–∏ –≤—ã—à–µ
# watchdog —É–¥–∞–ª—ë–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows
werkzeug==2.3.0 –∏–ª–∏ –≤—ã—à–µ
email-validator==2.0.0 –∏–ª–∏ –≤—ã—à–µ
```

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫:
```bash
pip install -r requirements.txt
```

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ requirements.txt:
```
aiogram>=3.0.0
flask>=2.0.0
flask-login>=0.6.0
flask-session>=0.5.0
flask-sqlalchemy>=3.0.0
flask-wtf>=1.1.0
gunicorn>=23.0.0
pandas>=2.0.0
psutil>=5.9.0
psycopg2-binary>=2.9.0
pytz>=2022.0
requests>=2.28.0
# watchdog —É–¥–∞–ª—ë–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows
werkzeug>=2.3.0
email-validator>=2.0.0
```

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞

1. **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ WebApp**
   - –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä—ã–±—ã (–º–∞–ª–µ–Ω—å–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, –∫—Ä—É–ø–Ω–∞—è)
   - –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
   - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–†–´–ë–ê2025: 10%, –ó–û–õ–û–¢–û: 20%)
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ (10% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ 4+ —Ä—ã–±)

2. **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞–º–∏**
   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 15 –º–∏–Ω—É—Ç
   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

3. **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion**
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ –ª–∏–¥–æ–≤
   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion –≤ Excel

4. **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏**
   - –ö–æ–º–∞–Ω–¥–∞ /backup - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   - –ö–æ–º–∞–Ω–¥–∞ /archive - –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
   - –ö–æ–º–∞–Ω–¥–∞ /file - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ Excel
   - –ö–æ–º–∞–Ω–¥–∞ /post - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

5. **–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã

### –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏
- –†–´–ë–ê2025 - —Å–∫–∏–¥–∫–∞ 10% –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ó–û–õ–û–¢–û - —Å–∫–∏–¥–∫–∞ 20% –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–æ—Ç 3 –∑–∞–∫–∞–∑–æ–≤)
- –û–ø—Ç–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ 10% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ 4+ —Ä—ã–± (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
- –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: —Å 8:00 –¥–æ 18:00 –ø–æ –ò—Ä–∫—É—Ç—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (UTC+8)
- –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞

### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ WebApp
- –û–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —á–∏—Å—Ç–æ–º JavaScript
- –ö–æ—Ä–∑–∏–Ω–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å–∫–∏–¥–æ–∫

## –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–Ω–µ—Å–µ–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π

### –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
–ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ botf.py:
```python
PROMO_CODE = "–†–´–ë–ê2025"    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ (10% —Å–∫–∏–¥–∫–∞)
GOLD_PROMO = "–ó–û–õ–û–¢–û"      # –ó–æ–ª–æ—Ç–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ (20% —Å–∫–∏–¥–∫–∞)
DISCOUNT = 0.9             # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (90% –æ—Ç —Ü–µ–Ω—ã)
GOLD_DISCOUNT = 0.8        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –∑–æ–ª–æ—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (80% –æ—Ç —Ü–µ–Ω—ã)
```

### –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω
–¶–µ–Ω—ã –Ω–∞ —Ä—ã–±—É —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ PRICES:
```python
PRICES = {
    "–º–∞–ª–µ–Ω—å–∫–∞—è": 450,
    "—Å—Ä–µ–¥–Ω—è—è": 600,
    "–∫—Ä—É–ø–Ω–∞—è": 750
}
```

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ ADMIN_IDS –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ botf.py.

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

- Python 3.10+
- aiogram - –¥–ª—è —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞
- Flask - –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- Pandas - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
- SQLite - –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –¢–µ–≥ html –¥–ª—è Telegram WebApp

–°–æ–∑–¥–∞–Ω–Ω–æ: ${timestamp}
""")
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ (Python —Ñ–∞–π–ª—ã, Telegram WebApp, —à–∞–±–ª–æ–Ω—ã –∏ —Ç.–¥.)
        files_to_archive = [
            "botf.py", 
            "main.py", 
            "run.py", 
            "sync_service.py",
            "bot.db",
            "INSTALLATION.md"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories_to_archive = [
            "static",
            "templates"
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª requirements.txt –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        requirements_path = f"{archive_dir}/requirements.txt"
        if not os.path.exists(requirements_path):
            with open(requirements_path, 'w', encoding='utf-8') as req_file:
                req_file.write("""aiogram>=3.0.0
flask>=2.0.0
flask-login>=0.6.0
flask-session>=0.5.0
flask-sqlalchemy>=3.0.0
flask-wtf>=1.1.0
gunicorn>=23.0.0
pandas>=2.0.0
psutil>=5.9.0
psycopg2-binary>=2.9.0
pytz>=2022.0
requests>=2.28.0
# watchdog —É–¥–∞–ª—ë–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows
werkzeug>=2.3.0
email-validator>=2.0.0
openpyxl>=3.1.0
""")
                
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(archive_path, 'w') as zipf:
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            for file in files_to_archive:
                if os.path.exists(file):
                    zipf.write(file)
                    logging.info(f"Added {file} to archive")
                else:
                    logging.warning(f"File {file} not found, skipping")
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for directory in directories_to_archive:
                if os.path.exists(directory):
                    for root, dirs, files in os.walk(directory):
                        for file in files:
                            file_path = os.path.join(root, file)
                            zipf.write(file_path)
                            logging.info(f"Added {file_path} to archive")
                else:
                    logging.warning(f"Directory {directory} not found, skipping")
            
            # –î–æ–±–∞–≤–ª—è–µ–º README.md –≤ –∞—Ä—Ö–∏–≤
            zipf.write(readme_path, "README.md")
            logging.info("Added README.md to archive")
            
            # –î–æ–±–∞–≤–ª—è–µ–º requirements.txt –≤ –∞—Ä—Ö–∏–≤
            zipf.write(requirements_path, "requirements.txt")
            logging.info("Added requirements.txt to archive")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
        with open(archive_path, 'rb') as file:
            await bot.send_document(
                user_id, 
                types.BufferedInputFile(
                    file.read(),
                    filename=f"{archive_name}.zip"
                ),
                caption="üì¶ –ê—Ä—Ö–∏–≤ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π (README.md –∏ requirements.txt —Å–æ —Å–ø–∏—Å–∫–æ–º –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏)"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ README.md –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        with open(readme_path, 'rb') as file:
            await bot.send_document(
                user_id, 
                types.BufferedInputFile(
                    file.read(),
                    filename="README.md"
                ),
                caption="üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"
            )
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ INSTALLATION.md –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        if os.path.exists("INSTALLATION.md"):
            with open("INSTALLATION.md", 'rb') as file:
                await bot.send_document(
                    user_id, 
                    types.BufferedInputFile(
                        file.read(),
                        filename="INSTALLATION.md"
                    ),
                    caption="üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞"
                )
        
        await progress_message.edit_text("‚úÖ –ê—Ä—Ö–∏–≤ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        
    except Exception as e:
        logging.error(f"Failed to create archive: {e}", exc_info=True)
        await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")

@dp.message(Command("file"))
async def export_orders_to_excel(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª Excel."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    progress_message = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor = db_execute(
            "SELECT id, user_id, full_name, phone, items, total, timestamp, status FROM orders ORDER BY timestamp DESC"
        )
        orders = cursor.fetchall()
        
        if not orders:
            await progress_message.edit_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        import pandas as pd
        df = pd.DataFrame(
            orders, 
            columns=["ID", "User ID", "Name", "Phone", "Items", "Total", "Date", "Status"]
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∏
        df["Items"] = df["Items"].apply(lambda x: ", ".join(json.loads(x)) if x else "")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        df["Date"] = df["Date"].apply(lambda x: x.strftime("%d.%m.%Y %H:%M") if x else "")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
        file_name = f"orders_{timestamp}.xlsx"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ Excel —Ñ–∞–π–ª
        df.to_excel(file_name, index=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(file_name, 'rb') as file:
            await message.answer_document(
                types.BufferedInputFile(
                    file.read(), 
                    filename=file_name
                ),
                caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {timestamp}"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.remove(file_name)
        
        await progress_message.delete()
        
    except Exception as e:
        logging.error(f"Error exporting orders to Excel: {e}")
        await progress_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@dp.message(Command("post"))
async def start_broadcast(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in ADMIN_IDS:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        await state.set_state(BroadcastState.waiting_message)
        await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@dp.error()
async def error_handler(update, exception):
    logging.error(f"Unhandled exception: {exception}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = None
    if hasattr(update, 'from_user'):
        user_id = update.from_user.id
    elif hasattr(update, 'message') and hasattr(update.message, 'from_user'):
        user_id = update.message.from_user.id
    
    # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if user_id:
        try:
            await bot.send_message(
                user_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except Exception as e:
            logging.error(f"Failed to send error message: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
    error_message = f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{exception}\n\nUpdate: {update}"
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, error_message)
        except Exception as e:
            logging.error(f"Failed to notify admin {admin_id} about error: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
async def scheduled_tasks():
    while True:
        try:
            # –ü–æ–º–µ—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ª–∏–¥—ã –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ
            expire_old_leads()
            
            # Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞
            try:
                resent_count = await retry_failed_notifications(bot)
                if resent_count > 0:
                    logging.info(f"Successfully resent {resent_count} notifications")
            except Exception as e:
                logging.error(f"Failed to retry notifications: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            try:
                cursor = db_execute(
                    "SELECT order_statuses.id, order_statuses.order_id, order_statuses.status, orders.user_id "
                    "FROM order_statuses JOIN orders ON order_statuses.order_id = orders.id "
                    "WHERE order_statuses.notified = 0"
                )
                notifications = cursor.fetchall()
                
                for notification_id, order_id, status, user_id in notifications:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    message = STATUS_MESSAGES.get(status, f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}")
                    
                    try:
                        await bot.send_message(user_id, message)
                        logging.info(f"Sent notification for order {order_id}: '{message}'")
                        
                        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                        db_execute(
                            "UPDATE order_statuses SET notified = 1 WHERE id = ?",
                            (notification_id,)
                        )
                    except TelegramForbiddenError:
                        logging.warning(f"User {user_id} blocked the bot, marking notification as sent")
                        db_execute(
                            "UPDATE order_statuses SET notified = 1 WHERE id = ?",
                            (notification_id,)
                        )
                    except Exception as e:
                        logging.error(f"Failed to send notification to {user_id}: {e}")
            except Exception as e:
                logging.error(f"Failed to process notifications: {e}")
        
        except Exception as e:
            logging.error(f"Error in scheduled_tasks: {e}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
@dp.message(lambda message: hasattr(message, 'web_app_data') and message.web_app_data.data)
async def handle_webapp_data(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram Mini App."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –∏–∑ JSON
        data = json.loads(message.web_app_data.data)
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp: {data}")
        
        # –ü–û–õ–ù–û–°–¢–¨–Æ –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        # –í—Å–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–∏–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è –∏—Å—Ç–µ–∫—à–∏–π)
        user_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ –ª–∏–¥–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = db_execute(
            "SELECT id FROM leads WHERE user_id = ? AND expired = 1 ORDER BY timestamp DESC LIMIT 1", 
            (user_id,)
        )
        expired_lead = cursor.fetchone()
        
        if expired_lead:
            # –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–∏–¥
            lead_id = expired_lead[0]
            db_execute(
                "UPDATE leads SET timestamp = ?, expired = 0 WHERE id = ?",
                (datetime.now(), lead_id)
            )
            logging.info(f"–†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏—Å—Ç–µ–∫—à–∏–π –ª–∏–¥ {lead_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ WebApp")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - –æ–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if 'action' in data and data.get('action') == 'order_completed':
            # –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ mini_app
            order_id = data.get('orderId')
            
            if not order_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º redis-–ø–æ–¥–æ–±–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ Redis –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
            global _processed_notifications
            if not hasattr(sys.modules[__name__], '_processed_notifications'):
                _processed_notifications = {}
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_key = f"{message.from_user.id}_{order_id}"
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ –≤—ã—Ö–æ–¥–∏–º
            if notification_key in _processed_notifications:
                logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–∫–∞–∑ –±—ã–ª –ø–æ–ª—É—á–µ–Ω
            await message.answer(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                "üì± –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            )
            
            # –û—Ç–º–µ—á–∞–µ–º —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            _processed_notifications[notification_key] = True
            
            # –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –ø–∞–º—è—Ç—å
            asyncio.create_task(_cleanup_old_notifications())
            
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        else:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            logging.warning("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            await message.answer(
                "‚ùì –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
            )
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON –∏–∑ WebApp")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.")
            
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def _cleanup_old_notifications():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"""
    await asyncio.sleep(60)
    global _processed_notifications
    if hasattr(sys.modules[__name__], '_processed_notifications'):
        _processed_notifications.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞—Å–∫–µ
    asyncio.create_task(scheduled_tasks())
    
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
